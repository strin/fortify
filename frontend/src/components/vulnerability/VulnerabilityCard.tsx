import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { AlertCircle, FileText, MapPin, Wand2, Loader2, CheckCircle, XCircle, ExternalLink } from "lucide-react";
import { useState } from "react";

interface VulnerabilityCardProps {
  vulnerability: {
    id: string;
    title: string;
    description: string;
    severity: string;
    category: string;
    filePath: string;
    startLine: number;
    endLine?: number;
    codeSnippet: string;
    recommendation: string;
    metadata?: any;
    createdAt: string;
  };
  onSelect?: (vulnerability: any) => void;
  showFullDetails?: boolean;
  onFixWithAgent?: (vulnerabilityId: string) => void;
  scanJobId?: string;
}

interface FixJobState {
  status: 'idle' | 'loading' | 'completed' | 'failed';
  fixJobId?: string;
  pullRequestUrl?: string;
  error?: string;
}

// Supported vulnerability categories for fixing
const FIXABLE_CATEGORIES = [
  'INJECTION',
  'AUTHENTICATION', 
  'AUTHORIZATION',
  'CRYPTOGRAPHY',
  'DATA_EXPOSURE',
  'INPUT_VALIDATION',
  'CONFIGURATION',
  'SESSION_MANAGEMENT'
];

const severityColors = {
  CRITICAL: "bg-red-500 text-white",
  HIGH: "bg-orange-500 text-white",
  MEDIUM: "bg-yellow-500 text-black",
  LOW: "bg-blue-500 text-white",
  INFO: "bg-gray-500 text-white",
};

const categoryLabels: Record<string, string> = {
  INJECTION: "Injection",
  AUTHENTICATION: "Authentication", 
  AUTHORIZATION: "Authorization",
  CRYPTOGRAPHY: "Cryptography",
  DATA_EXPOSURE: "Data Exposure",
  BUSINESS_LOGIC: "Business Logic",
  CONFIGURATION: "Configuration",
  DEPENDENCY: "Dependency",
  INPUT_VALIDATION: "Input Validation",
  OUTPUT_ENCODING: "Output Encoding",
  SESSION_MANAGEMENT: "Session Management",
  OTHER: "Other",
};

export function VulnerabilityCard({ vulnerability, onSelect, showFullDetails = true, onFixWithAgent, scanJobId }: VulnerabilityCardProps) {
  const [fixJobState, setFixJobState] = useState<FixJobState>({ status: 'idle' });
  const [isHovered, setIsHovered] = useState(false);

  const truncateFilePath = (path: string, maxLength = 50) => {
    if (path.length <= maxLength) return path;
    const parts = path.split('/');
    if (parts.length <= 2) return path;
    return `.../${parts.slice(-2).join('/')}`;
  };

  const isFixable = FIXABLE_CATEGORIES.includes(vulnerability.category);

  const handleFixWithAgent = async (e: React.MouseEvent) => {
    e.stopPropagation(); // Prevent card selection
    
    // If completed, open the PR link
    if (fixJobState.status === 'completed' && fixJobState.pullRequestUrl) {
      window.open(fixJobState.pullRequestUrl, '_blank');
      return;
    }

    if (!onFixWithAgent || !isFixable || fixJobState.status === 'loading') return;

    setFixJobState({ status: 'loading' });
    
    try {
      // Call the parent component's fix handler
      await onFixWithAgent(vulnerability.id);
      
      // TODO: Poll for fix job status
      // For now, just simulate completion after a delay
      setTimeout(() => {
        setFixJobState({ 
          status: 'completed', 
          pullRequestUrl: 'https://github.com/example/repo/pull/123' // This will come from actual API
        });
      }, 3000);
      
    } catch (error) {
      setFixJobState({ 
        status: 'failed', 
        error: error instanceof Error ? error.message : 'Fix failed'
      });
    }
  };

  const renderFixButton = () => {
    if (!isFixable) return null;

    const buttonVariants = {
      idle: {
        icon: <Wand2 className="h-4 w-4" />,
        text: "Fix with Agent",
        className: "bg-blue-600 hover:bg-blue-700 text-white"
      },
      loading: {
        icon: <Loader2 className="h-4 w-4 animate-spin" />,
        text: "Fixing...",
        className: "bg-blue-600 text-white opacity-50 cursor-not-allowed"
      },
      completed: {
        icon: <CheckCircle className="h-4 w-4" />,
        text: "Fixed",
        className: "bg-green-600 hover:bg-green-700 text-white"
      },
      failed: {
        icon: <XCircle className="h-4 w-4" />,
        text: "Retry Fix",
        className: "bg-red-600 hover:bg-red-700 text-white"
      }
    };

    const variant = buttonVariants[fixJobState.status];
    
    return (
      <Button
        size="sm"
        onClick={handleFixWithAgent}
        disabled={fixJobState.status === 'loading'}
        className={`absolute top-3 right-3 flex items-center gap-2 transition-all duration-200 ${
          isHovered || fixJobState.status !== 'idle' ? 'opacity-100 scale-100' : 'opacity-0 scale-95'
        } ${variant.className}`}
      >
        {variant.icon}
        {variant.text}
        {fixJobState.status === 'completed' && fixJobState.pullRequestUrl && (
          <ExternalLink className="h-3 w-3 ml-1" />
        )}
      </Button>
    );
  };

  return (
    <Card 
      className={`bg-card border-border relative ${onSelect ? 'cursor-pointer hover:bg-accent transition-colors' : ''}`}
      onClick={onSelect ? () => onSelect(vulnerability) : undefined}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      {renderFixButton()}
      
      <CardHeader>
        <div className="flex justify-between items-start">
          <div className="flex-1 pr-16"> {/* Add padding to prevent overlap with fix button */}
            <CardTitle className="text-lg text-white mb-2 flex items-center gap-2">
              <AlertCircle className="h-5 w-5" />
              {vulnerability.title}
              <Badge className={severityColors[vulnerability.severity as keyof typeof severityColors]}>
                {vulnerability.severity}
              </Badge>
              <Badge variant="outline">
                {categoryLabels[vulnerability.category] || vulnerability.category}
              </Badge>
            </CardTitle>
            <CardDescription className="text-gray-300 text-sm flex items-center gap-4">
              <span className="flex items-center gap-1">
                <FileText className="h-4 w-4" />
                {truncateFilePath(vulnerability.filePath)}
              </span>
              <span className="flex items-center gap-1">
                <MapPin className="h-4 w-4" />
                Line {vulnerability.startLine}{vulnerability.endLine && vulnerability.endLine !== vulnerability.startLine ? `-${vulnerability.endLine}` : ''}
              </span>
            </CardDescription>
          </div>
        </div>
      </CardHeader>
      {showFullDetails && (
        <CardContent>
          <div className="space-y-4">
            {/* Description */}
            <div>
              <h4 className="font-semibold text-white mb-2">Description</h4>
              <p className="text-gray-300 text-sm">{vulnerability.description}</p>
            </div>

            {/* Code Snippet */}
            <div>
              <h4 className="font-semibold text-white mb-2">Code Snippet</h4>
              <pre className="bg-gray-900 p-4 rounded-lg overflow-x-auto text-sm">
                <code className="text-gray-300">{vulnerability.codeSnippet}</code>
              </pre>
            </div>

            {/* Recommendation */}
            <div>
              <h4 className="font-semibold text-white mb-2">Recommendation</h4>
              <p className="text-gray-300 text-sm">{vulnerability.recommendation}</p>
            </div>

            {/* Metadata */}
            {vulnerability.metadata && Object.keys(vulnerability.metadata).length > 0 && (
              <div>
                <h4 className="font-semibold text-white mb-2">Additional Information</h4>
                <div className="flex flex-wrap gap-2">
                  {Object.entries(vulnerability.metadata).map(([key, value]) => (
                    <Badge key={key} variant="outline" className="text-xs">
                      {key}: {String(value)}
                    </Badge>
                  ))}
                </div>
              </div>
            )}
          </div>
        </CardContent>
      )}
    </Card>
  );
}
