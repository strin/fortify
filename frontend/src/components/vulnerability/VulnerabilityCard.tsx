import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { AlertCircle, FileText, MapPin } from "lucide-react";

interface VulnerabilityCardProps {
  vulnerability: {
    id: string;
    title: string;
    description: string;
    severity: string;
    category: string;
    filePath: string;
    startLine: number;
    endLine?: number;
    codeSnippet: string;
    recommendation: string;
    metadata?: any;
    createdAt: string;
  };
  onSelect?: (vulnerability: any) => void;
  showFullDetails?: boolean;
}

const severityColors = {
  CRITICAL: "bg-red-500 text-white",
  HIGH: "bg-orange-500 text-white",
  MEDIUM: "bg-yellow-500 text-black",
  LOW: "bg-blue-500 text-white",
  INFO: "bg-gray-500 text-white",
};

const categoryLabels: Record<string, string> = {
  INJECTION: "Injection",
  AUTHENTICATION: "Authentication", 
  AUTHORIZATION: "Authorization",
  CRYPTOGRAPHY: "Cryptography",
  DATA_EXPOSURE: "Data Exposure",
  BUSINESS_LOGIC: "Business Logic",
  CONFIGURATION: "Configuration",
  DEPENDENCY: "Dependency",
  INPUT_VALIDATION: "Input Validation",
  OUTPUT_ENCODING: "Output Encoding",
  SESSION_MANAGEMENT: "Session Management",
  OTHER: "Other",
};

export function VulnerabilityCard({ vulnerability, onSelect, showFullDetails = true }: VulnerabilityCardProps) {
  const truncateFilePath = (path: string, maxLength = 50) => {
    if (path.length <= maxLength) return path;
    const parts = path.split('/');
    if (parts.length <= 2) return path;
    return `.../${parts.slice(-2).join('/')}`;
  };

  return (
    <Card 
      className={`bg-gray-800 border-gray-700 ${onSelect ? 'cursor-pointer hover:bg-gray-750 transition-colors' : ''}`}
      onClick={onSelect ? () => onSelect(vulnerability) : undefined}
    >
      <CardHeader>
        <div className="flex justify-between items-start">
          <div className="flex-1">
            <CardTitle className="text-lg text-white mb-2 flex items-center gap-2">
              <AlertCircle className="h-5 w-5" />
              {vulnerability.title}
              <Badge className={severityColors[vulnerability.severity as keyof typeof severityColors]}>
                {vulnerability.severity}
              </Badge>
              <Badge variant="outline">
                {categoryLabels[vulnerability.category] || vulnerability.category}
              </Badge>
            </CardTitle>
            <CardDescription className="text-gray-300 text-sm flex items-center gap-4">
              <span className="flex items-center gap-1">
                <FileText className="h-4 w-4" />
                {truncateFilePath(vulnerability.filePath)}
              </span>
              <span className="flex items-center gap-1">
                <MapPin className="h-4 w-4" />
                Line {vulnerability.startLine}{vulnerability.endLine && vulnerability.endLine !== vulnerability.startLine ? `-${vulnerability.endLine}` : ''}
              </span>
            </CardDescription>
          </div>
        </div>
      </CardHeader>
      {showFullDetails && (
        <CardContent>
          <div className="space-y-4">
            {/* Description */}
            <div>
              <h4 className="font-semibold text-white mb-2">Description</h4>
              <p className="text-gray-300 text-sm">{vulnerability.description}</p>
            </div>

            {/* Code Snippet */}
            <div>
              <h4 className="font-semibold text-white mb-2">Code Snippet</h4>
              <pre className="bg-gray-900 p-4 rounded-lg overflow-x-auto text-sm">
                <code className="text-gray-300">{vulnerability.codeSnippet}</code>
              </pre>
            </div>

            {/* Recommendation */}
            <div>
              <h4 className="font-semibold text-white mb-2">Recommendation</h4>
              <p className="text-gray-300 text-sm">{vulnerability.recommendation}</p>
            </div>

            {/* Metadata */}
            {vulnerability.metadata && Object.keys(vulnerability.metadata).length > 0 && (
              <div>
                <h4 className="font-semibold text-white mb-2">Additional Information</h4>
                <div className="flex flex-wrap gap-2">
                  {Object.entries(vulnerability.metadata).map(([key, value]) => (
                    <Badge key={key} variant="outline" className="text-xs">
                      {key}: {String(value)}
                    </Badge>
                  ))}
                </div>
              </div>
            )}
          </div>
        </CardContent>
      )}
    </Card>
  );
}
