import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  AlertCircle,
  FileText,
  MapPin,
  Wand2,
  Loader2,
  CheckCircle,
  XCircle,
  ExternalLink,
  Copy,
  Code,
  Eye,
  EyeOff,
  Sparkles,
  Clock,
  ChevronDown,
  ChevronUp
} from "lucide-react";
import { useState, useEffect, useRef } from "react";

interface VulnerabilityCardProps {
  vulnerability: {
    id: string;
    title: string;
    description: string;
    severity: string;
    category: string;
    filePath: string;
    startLine: number;
    endLine?: number;
    codeSnippet: string;
    recommendation: string;
    metadata?: any;
    createdAt: string;
  };
  onSelect?: (vulnerability: any) => void;
  showFullDetails?: boolean;
  onFixWithAgent?: (vulnerabilityId: string) => Promise<string | null>;
  scanJobId?: string;
}

interface FixJobState {
  status: "idle" | "loading" | "completed" | "failed";
  fixJobId?: string;
  pullRequestUrl?: string;
  error?: string;
}

// Supported vulnerability categories for fixing
const FIXABLE_CATEGORIES = [
  "INJECTION",
  "AUTHENTICATION",
  "AUTHORIZATION",
  "CRYPTOGRAPHY",
  "DATA_EXPOSURE",
  "INPUT_VALIDATION",
  "CONFIGURATION",
  "SESSION_MANAGEMENT",
];

const severityColors = {
  CRITICAL: "bg-red-500 text-white",
  HIGH: "bg-orange-500 text-white",
  MEDIUM: "bg-yellow-500 text-black",
  LOW: "bg-blue-500 text-white",
  INFO: "bg-gray-500 text-white",
};

const categoryLabels: Record<string, string> = {
  INJECTION: "Injection",
  AUTHENTICATION: "Authentication",
  AUTHORIZATION: "Authorization",
  CRYPTOGRAPHY: "Cryptography",
  DATA_EXPOSURE: "Data Exposure",
  BUSINESS_LOGIC: "Business Logic",
  CONFIGURATION: "Configuration",
  DEPENDENCY: "Dependency",
  INPUT_VALIDATION: "Input Validation",
  OUTPUT_ENCODING: "Output Encoding",
  SESSION_MANAGEMENT: "Session Management",
  OTHER: "Other",
};

export function VulnerabilityCard({
  vulnerability,
  onSelect,
  showFullDetails = true,
  onFixWithAgent,
  scanJobId,
}: VulnerabilityCardProps) {
  const [fixJobState, setFixJobState] = useState<FixJobState>({
    status: "idle",
  });
  const [isHovered, setIsHovered] = useState(false);
  const [isCodeExpanded, setIsCodeExpanded] = useState(false);
  const [isCodeCopied, setIsCodeCopied] = useState(false);
  const [showRecommendation, setShowRecommendation] = useState(true);
  const pollingIntervalRef = useRef<NodeJS.Timeout | null>(null);

  const truncateFilePath = (path: string, maxLength = 50) => {
    if (path.length <= maxLength) return path;
    const parts = path.split("/");
    if (parts.length <= 2) return path;
    return `.../${parts.slice(-2).join("/")}`;
  };

  const isFixable = FIXABLE_CATEGORIES.includes(vulnerability.category);

  // Cleanup polling interval on unmount
  useEffect(() => {
    return () => {
      if (pollingIntervalRef.current) {
        clearInterval(pollingIntervalRef.current);
      }
    };
  }, []);

  // Function to poll fix job status
  const pollFixJobStatus = async (fixJobId: string) => {
    try {
      const response = await fetch(`/api/fix/jobs/${fixJobId}/status`);
      if (!response.ok) {
        throw new Error("Failed to fetch fix job status");
      }

      const data = await response.json();

      // Update state based on backend status
      if (data.status === "COMPLETED") {
        setFixJobState({
          status: "completed",
          fixJobId: fixJobId,
          pullRequestUrl: data.pullRequestUrl || undefined,
        });
        // Stop polling when completed
        if (pollingIntervalRef.current) {
          clearInterval(pollingIntervalRef.current);
          pollingIntervalRef.current = null;
        }
      } else if (data.status === "FAILED" || data.status === "CANCELLED") {
        setFixJobState({
          status: "failed",
          fixJobId: fixJobId,
          error: data.error || "Fix job failed",
        });
        // Stop polling when failed
        if (pollingIntervalRef.current) {
          clearInterval(pollingIntervalRef.current);
          pollingIntervalRef.current = null;
        }
      } else if (data.status === "IN_PROGRESS" || data.status === "PENDING") {
        // Keep loading state, continue polling
        setFixJobState((prevState) => ({
          ...prevState,
          status: "loading",
          fixJobId: fixJobId,
        }));
      }
    } catch (error) {
      console.error("Error polling fix job status:", error);
      // Don't fail completely on polling errors, just log them
      // The polling will continue and might recover
    }
  };

  // Start polling for fix job status
  const startPolling = (fixJobId: string) => {
    // Clear any existing interval
    if (pollingIntervalRef.current) {
      clearInterval(pollingIntervalRef.current);
    }

    // Start polling every 2 seconds
    pollingIntervalRef.current = setInterval(() => {
      pollFixJobStatus(fixJobId);
    }, 2000);

    // Also poll immediately
    pollFixJobStatus(fixJobId);
  };

  const handleFixWithAgent = async (e: React.MouseEvent) => {
    e.stopPropagation(); // Prevent card selection

    // If completed, open the PR link
    if (fixJobState.status === "completed" && fixJobState.pullRequestUrl) {
      window.open(fixJobState.pullRequestUrl, "_blank");
      return;
    }

    if (!onFixWithAgent || !isFixable || fixJobState.status === "loading")
      return;

    setFixJobState({ status: "loading" });

    try {
      // Call the parent component's fix handler and get the fix job ID
      const fixJobId = await onFixWithAgent(vulnerability.id);

      if (fixJobId) {
        // Start polling for real status updates
        startPolling(fixJobId);
      } else {
        throw new Error("No fix job ID returned");
      }
    } catch (error) {
      setFixJobState({
        status: "failed",
        error: error instanceof Error ? error.message : "Fix failed",
      });
    }
  };

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setIsCodeCopied(true);
      setTimeout(() => setIsCodeCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy:', err);
    }
  };

  const renderFixButton = () => {
    if (!isFixable) return null;

    const buttonVariants = {
      idle: {
        icon: <Sparkles className="h-4 w-4" />,
        text: "Fix with AI",
        className: "bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white shadow-lg",
        pulse: false,
      },
      loading: {
        icon: <Loader2 className="h-4 w-4 animate-spin" />,
        text: "AI Fixing...",
        className: "bg-gradient-to-r from-blue-600 to-purple-600 text-white shadow-lg animate-pulse",
        pulse: true,
      },
      completed: {
        icon: <CheckCircle className="h-4 w-4" />,
        text: "View Fix",
        className: "bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white shadow-lg",
        pulse: false,
      },
      failed: {
        icon: <XCircle className="h-4 w-4" />,
        text: "Retry Fix",
        className: "bg-gradient-to-r from-red-600 to-pink-600 hover:from-red-700 hover:to-pink-700 text-white shadow-lg",
        pulse: false,
      },
    };

    const variant = buttonVariants[fixJobState.status];

    return (
      <div className={`absolute top-4 right-4 transition-all duration-300 ${
        isHovered || fixJobState.status !== "idle"
          ? "opacity-100 scale-100 translate-y-0"
          : "opacity-0 scale-95 translate-y-2"
      }`}>
        <Button
          size="sm"
          onClick={handleFixWithAgent}
          disabled={fixJobState.status === "loading"}
          className={`flex items-center gap-2 transition-all duration-200 hover:scale-105 ${
            variant.className
          } ${variant.pulse ? 'animate-pulse' : ''}`}
        >
          <div className={`transition-transform duration-200 ${
            fixJobState.status === 'loading' ? 'animate-spin' : ''
          }`}>
            {variant.icon}
          </div>
          <span className="font-medium">{variant.text}</span>
          {fixJobState.status === "completed" && fixJobState.pullRequestUrl && (
            <ExternalLink className="h-3 w-3 ml-1" />
          )}
        </Button>
        
        {/* Status indicator */}
        {fixJobState.status === "loading" && (
          <div className="absolute -bottom-1 -right-1">
            <div className="w-3 h-3 bg-blue-500 rounded-full animate-ping" />
            <div className="absolute top-0 w-3 h-3 bg-blue-600 rounded-full" />
          </div>
        )}
      </div>
    );
  };

  return (
    <Card
      className={`group bg-card border-border relative overflow-hidden hover:shadow-lg hover:shadow-primary/5 transition-all duration-300 hover:scale-[1.005] ${
        onSelect ? "cursor-pointer" : ""
      } ${
        vulnerability.severity === 'CRITICAL' ? 'hover:shadow-red-500/10 border-red-500/20' :
        vulnerability.severity === 'HIGH' ? 'hover:shadow-orange-500/10 border-orange-500/20' :
        vulnerability.severity === 'MEDIUM' ? 'hover:shadow-yellow-500/10 border-yellow-500/20' :
        'hover:shadow-blue-500/10 border-blue-500/20'
      }`}
      onClick={onSelect ? () => onSelect(vulnerability) : undefined}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      {/* Severity indicator line */}
      <div className={`absolute top-0 left-0 right-0 h-1 transition-all duration-300 ${
        vulnerability.severity === 'CRITICAL' ? 'bg-gradient-to-r from-red-500 to-red-600' :
        vulnerability.severity === 'HIGH' ? 'bg-gradient-to-r from-orange-500 to-orange-600' :
        vulnerability.severity === 'MEDIUM' ? 'bg-gradient-to-r from-yellow-500 to-yellow-600' :
        vulnerability.severity === 'LOW' ? 'bg-gradient-to-r from-blue-500 to-blue-600' :
        'bg-gradient-to-r from-gray-500 to-gray-600'
      } group-hover:h-1.5`} />
      
      {renderFixButton()}

      <CardHeader className="pb-4">
        <div className="flex justify-between items-start">
          <div className="flex-1 pr-20">
            <CardTitle className="text-xl mb-3 flex items-center gap-3 group-hover:text-primary transition-colors">
              <div className={`rounded-full p-2 transition-all duration-200 ${
                vulnerability.severity === 'CRITICAL' ? 'bg-red-500/10 text-red-400 group-hover:bg-red-500/20' :
                vulnerability.severity === 'HIGH' ? 'bg-orange-500/10 text-orange-400 group-hover:bg-orange-500/20' :
                vulnerability.severity === 'MEDIUM' ? 'bg-yellow-500/10 text-yellow-400 group-hover:bg-yellow-500/20' :
                vulnerability.severity === 'LOW' ? 'bg-blue-500/10 text-blue-400 group-hover:bg-blue-500/20' :
                'bg-gray-500/10 text-gray-400 group-hover:bg-gray-500/20'
              }`}>
                <AlertCircle className="h-5 w-5" />
              </div>
              <div className="flex-1">
                <div className="font-semibold text-lg leading-tight mb-2">
                  {vulnerability.title}
                </div>
                <div className="flex items-center gap-2">
                  <Badge
                    className={`font-medium ${
                      severityColors[
                        vulnerability.severity as keyof typeof severityColors
                      ]
                    } shadow-sm`}
                  >
                    {vulnerability.severity}
                  </Badge>
                  <Badge variant="outline" className="bg-secondary/50">
                    {categoryLabels[vulnerability.category] ||
                      vulnerability.category}
                  </Badge>
                  {isFixable && (
                    <Badge variant="secondary" className="bg-blue-500/10 text-blue-400 border-blue-500/20">
                      <Sparkles className="h-3 w-3 mr-1" />
                      AI Fixable
                    </Badge>
                  )}
                </div>
              </div>
            </CardTitle>
            <CardDescription className="text-muted-foreground flex items-center gap-6 text-sm">
              <span className="flex items-center gap-2 bg-secondary/30 px-3 py-1 rounded-full">
                <FileText className="h-4 w-4 text-blue-400" />
                <span className="font-mono">{truncateFilePath(vulnerability.filePath)}</span>
              </span>
              <span className="flex items-center gap-2 bg-secondary/30 px-3 py-1 rounded-full">
                <MapPin className="h-4 w-4 text-green-400" />
                <span className="font-mono">
                  Line {vulnerability.startLine}
                  {vulnerability.endLine &&
                  vulnerability.endLine !== vulnerability.startLine
                    ? `-${vulnerability.endLine}`
                    : ""}
                </span>
              </span>
              <span className="flex items-center gap-2 text-xs text-muted-foreground">
                <Clock className="h-3 w-3" />
                Found {new Date(vulnerability.createdAt).toLocaleDateString()}
              </span>
            </CardDescription>
          </div>
        </div>
      </CardHeader>
      {showFullDetails && (
        <CardContent className="space-y-6">
          {/* Description */}
          <div className="space-y-3">
            <h4 className="font-semibold text-lg flex items-center gap-2">
              <div className="w-1 h-5 bg-primary rounded-full" />
              Description
            </h4>
            <div className="bg-secondary/30 p-4 rounded-lg border border-border/50">
              <p className="text-foreground leading-relaxed">
                {vulnerability.description}
              </p>
            </div>
          </div>

          {/* Enhanced Code Snippet */}
          <div className="space-y-3">
            <div className="flex items-center justify-between">
              <h4 className="font-semibold text-lg flex items-center gap-2">
                <div className="w-1 h-5 bg-yellow-500 rounded-full" />
                Code Snippet
              </h4>
              <div className="flex items-center gap-2">
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => copyToClipboard(vulnerability.codeSnippet)}
                  className="text-xs hover:scale-105 transition-transform"
                >
                  {isCodeCopied ? (
                    <CheckCircle className="h-4 w-4 mr-1 text-green-400" />
                  ) : (
                    <Copy className="h-4 w-4 mr-1" />
                  )}
                  {isCodeCopied ? 'Copied!' : 'Copy'}
                </Button>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setIsCodeExpanded(!isCodeExpanded)}
                  className="text-xs hover:scale-105 transition-transform"
                >
                  {isCodeExpanded ? (
                    <><EyeOff className="h-4 w-4 mr-1" /> Collapse</>
                  ) : (
                    <><Eye className="h-4 w-4 mr-1" /> Expand</>
                  )}
                </Button>
              </div>
            </div>
            <div className="relative group/code">
              <div className="absolute top-3 left-3 flex items-center gap-2 z-10">
                <Code className="h-4 w-4 text-blue-400" />
                <span className="text-xs text-muted-foreground font-mono">
                  {vulnerability.filePath.split('/').pop()}
                </span>
              </div>
              <pre className={`bg-gray-950 border border-gray-800 p-6 pt-12 rounded-lg overflow-x-auto text-sm font-mono transition-all duration-300 ${
                isCodeExpanded ? 'max-h-none' : 'max-h-48'
              } hover:shadow-lg hover:shadow-primary/5`}>
                <code className="text-gray-300 leading-relaxed">
                  {vulnerability.codeSnippet}
                </code>
              </pre>
              {!isCodeExpanded && vulnerability.codeSnippet.split('\n').length > 8 && (
                <div className="absolute bottom-0 left-0 right-0 h-16 bg-gradient-to-t from-gray-950 to-transparent rounded-b-lg flex items-end justify-center pb-3">
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => setIsCodeExpanded(true)}
                    className="text-xs text-muted-foreground hover:text-foreground"
                  >
                    <ChevronDown className="h-4 w-4 mr-1" />
                    Show more
                  </Button>
                </div>
              )}
            </div>
          </div>

          {/* Enhanced Recommendation */}
          <div className="space-y-3">
            <div className="flex items-center justify-between">
              <h4 className="font-semibold text-lg flex items-center gap-2">
                <div className="w-1 h-5 bg-green-500 rounded-full" />
                AI Recommendation
              </h4>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowRecommendation(!showRecommendation)}
                className="text-xs hover:scale-105 transition-transform"
              >
                {showRecommendation ? (
                  <ChevronUp className="h-4 w-4 mr-1" />
                ) : (
                  <ChevronDown className="h-4 w-4 mr-1" />
                )}
                {showRecommendation ? 'Hide' : 'Show'}
              </Button>
            </div>
            {showRecommendation && (
              <div className="bg-gradient-to-r from-green-500/10 to-emerald-500/10 p-4 rounded-lg border border-green-500/20 backdrop-blur-sm">
                <div className="flex items-start gap-3">
                  <Sparkles className="h-5 w-5 text-green-400 mt-0.5 flex-shrink-0" />
                  <p className="text-foreground leading-relaxed">
                    {vulnerability.recommendation}
                  </p>
                </div>
              </div>
            )}
          </div>

          {/* Enhanced Metadata */}
          {vulnerability.metadata &&
            Object.keys(vulnerability.metadata).length > 0 && (
              <div className="space-y-3">
                <h4 className="font-semibold text-lg flex items-center gap-2">
                  <div className="w-1 h-5 bg-purple-500 rounded-full" />
                  Additional Information
                </h4>
                <div className="bg-secondary/30 p-4 rounded-lg border border-border/50">
                  <div className="flex flex-wrap gap-3">
                    {Object.entries(vulnerability.metadata).map(
                      ([key, value]) => (
                        <div key={key} className="flex items-center gap-2 bg-secondary/50 px-3 py-2 rounded-md">
                          <span className="text-xs font-medium text-muted-foreground uppercase tracking-wide">
                            {key.replace('_', ' ')}
                          </span>
                          <span className="text-sm font-mono">{String(value)}</span>
                        </div>
                      )
                    )}
                  </div>
                </div>
              </div>
            )}
        </CardContent>
      )}
    </Card>
  );
}
