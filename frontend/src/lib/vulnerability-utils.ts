export const severityColors = {
  CRITICAL: "bg-red-500 text-white",
  HIGH: "bg-orange-500 text-white",
  MEDIUM: "bg-yellow-500 text-black",
  LOW: "bg-blue-500 text-white",
  INFO: "bg-gray-500 text-white",
} as const;

export const severityTextColors = {
  CRITICAL: "text-red-400",
  HIGH: "text-orange-400",
  MEDIUM: "text-yellow-400",
  LOW: "text-blue-400",
  INFO: "text-gray-400",
} as const;

export const statusColors = {
  PENDING: "bg-yellow-500",
  IN_PROGRESS: "bg-blue-500",
  COMPLETED: "bg-green-500",
  FAILED: "bg-red-500",
} as const;

export const statusTextColors = {
  PENDING: "text-yellow-400 border-yellow-400",
  IN_PROGRESS: "text-blue-400 border-blue-400",
  COMPLETED: "text-green-400 border-green-400",
  FAILED: "text-red-400 border-red-400",
} as const;

export const categoryLabels: Record<string, string> = {
  INJECTION: "Injection",
  AUTHENTICATION: "Authentication", 
  AUTHORIZATION: "Authorization",
  CRYPTOGRAPHY: "Cryptography",
  DATA_EXPOSURE: "Data Exposure",
  BUSINESS_LOGIC: "Business Logic",
  CONFIGURATION: "Configuration",
  DEPENDENCY: "Dependency",
  INPUT_VALIDATION: "Input Validation",
  OUTPUT_ENCODING: "Output Encoding",
  SESSION_MANAGEMENT: "Session Management",
  OTHER: "Other",
};

export type VulnerabilitySeverity = keyof typeof severityColors;
export type ScanStatus = keyof typeof statusColors;
export type VulnerabilityCategory = keyof typeof categoryLabels;

export function formatDate(dateString: string): string {
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
}

export function formatDuration(startedAt?: string, finishedAt?: string): string {
  if (!startedAt) return "N/A";
  
  const start = new Date(startedAt);
  const end = finishedAt ? new Date(finishedAt) : new Date();
  const diff = end.getTime() - start.getTime();
  
  // Handle negative time differences (clock sync issues)
  if (diff < 0) {
    console.warn(`Negative time difference detected: start=${startedAt}, end=${finishedAt || 'now'}, diff=${diff}ms`);
    return "0s"; // Show 0 seconds for negative differences
  }
  
  const minutes = Math.floor(diff / 60000);
  const seconds = Math.floor((diff % 60000) / 1000);
  return `${minutes}m ${seconds}s`;
}

export function truncateFilePath(path: string, maxLength = 50): string {
  if (path.length <= maxLength) return path;
  const parts = path.split('/');
  if (parts.length <= 2) return path;
  return `.../${parts.slice(-2).join('/')}`;
}

export function getSeverityOrder(): VulnerabilitySeverity[] {
  return ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW', 'INFO'];
}

export function getHighestSeverity(severities: string[]): VulnerabilitySeverity {
  const order = getSeverityOrder();
  for (const severity of order) {
    if (severities.includes(severity)) {
      return severity;
    }
  }
  return 'INFO';
}
