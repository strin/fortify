generator javascript {
        provider      = "prisma-client-js"
        output        = "../frontend/node_modules/.prisma/client"
        binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

generator python {
        provider             = "prisma-client-py"
        interface            = "asyncio"
        recursive_type_depth = 5
        output               = "../scan-agent/generated/prisma_client"
}

datasource db {
        provider  = "postgresql"
        url       = env("POSTGRES_PRISMA_URL")
        directUrl = env("POSTGRES_URL_NON_POOLING")
}

// ==========================================
// USER MANAGEMENT
// ==========================================

model User {
        id             String   @id @default(cuid())
        email          String   @unique
        username       String?  @unique
        githubUsername String?  @unique
        displayName    String?
        avatarUrl      String?
        createdAt      DateTime @default(now())
        updatedAt      DateTime @updatedAt

        // Authentication
        password          String?
        emailVerified     DateTime?
        lastLoginAt       DateTime?
        isActive          Boolean   @default(true)
        githubAccessToken String?

        // User preferences
        preferences Json?

        // Relations
        scanJobs    ScanJob[]
        scanTargets ScanTarget[]

        @@map("users")
}

// ==========================================
// SCAN MANAGEMENT
// ==========================================

model ScanJob {
        id           String  @id @default(cuid())
        userId       String? // Optional for now to match current implementation
        scanTargetId String? // Optional link to scan target

        // Core job information (exactly matching job.py)
        type   JobType   @default(SCAN_REPO)
        status JobStatus @default(PENDING)
        data   Json // Stores ScanJobData as JSON
        result Json? // Stores scan results
        error  String? // Error message if failed

        // Timing (matching job.py structure)
        createdAt DateTime @default(now()) @map("created_at")
        updatedAt DateTime @updatedAt @map("updated_at")

        // Execution details (optional)
        startedAt  DateTime?
        finishedAt DateTime?

        // Metrics (optional)
        vulnerabilitiesFound Int @default(0)

        // Relations
        user            User?               @relation(fields: [userId], references: [id], onDelete: SetNull)
        scanTarget      ScanTarget?         @relation(fields: [scanTargetId], references: [id], onDelete: SetNull)
        vulnerabilities CodeVulnerability[]

        @@index([status, createdAt])
        @@index([userId, finishedAt])
        @@index([scanTargetId])
        @@map("scan_jobs")
}

// ==========================================
// VULNERABILITY MANAGEMENT
// ==========================================

model CodeVulnerability {
        id        String @id @default(cuid())
        scanJobId String

        // Core vulnerability information
        title       String
        description String
        severity    VulnerabilitySeverity
        category    VulnerabilityCategory

        // Location information
        filePath    String
        startLine   Int
        endLine     Int?
        codeSnippet String

        // Remediation
        recommendation String

        // Optional metadata (stored as JSON for flexibility)
        metadata Json? // Can store CWE, OWASP, confidence, etc.

        createdAt DateTime @default(now())

        // Relations
        scanJob ScanJob @relation(fields: [scanJobId], references: [id], onDelete: Cascade)

        @@index([scanJobId])
        @@index([scanJobId, severity])
        @@index([filePath])
        @@map("code_vulnerabilities")
}

// ==========================================
// SCAN TARGET MANAGEMENT
// ==========================================

model ScanTarget {
        id     String @id @default(cuid())
        userId String // Owner

        // Repository information
        name        String // User-friendly name
        description String?
        repoUrl     String
        branch      String  @default("main")
        subPath     String? // Optional path filter

        // Configuration
        isActive Boolean @default(true)

        // Metadata
        createdAt  DateTime  @default(now())
        updatedAt  DateTime  @updatedAt
        lastScanAt DateTime?

        // Relations
        user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
        scanJobs ScanJob[]

        @@unique([userId, repoUrl, branch, subPath])
        @@index([userId, isActive])
        @@index([lastScanAt])
        @@map("scan_targets")
}

// ==========================================
// ENUMS
// ==========================================

// Job enums matching job.py
enum JobType {
        SCAN_REPO
        SCAN_FILE
        BATCH_SCAN
}

enum JobStatus {
        PENDING
        IN_PROGRESS
        COMPLETED
        FAILED
}

enum VulnerabilitySeverity {
        INFO
        LOW
        MEDIUM
        HIGH
        CRITICAL
}

enum VulnerabilityCategory {
        INJECTION
        AUTHENTICATION
        AUTHORIZATION
        CRYPTOGRAPHY
        DATA_EXPOSURE
        BUSINESS_LOGIC
        CONFIGURATION
        DEPENDENCY
        INPUT_VALIDATION
        OUTPUT_ENCODING
        SESSION_MANAGEMENT
        OTHER
}
