generator javascript {
        provider      = "prisma-client-js"
        output        = "../frontend/node_modules/.prisma/client"
        binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

generator python {
        provider             = "prisma-client-py"
        interface            = "asyncio"
        recursive_type_depth = 5
        output               = "../scan-agent/generated/prisma_client"
}

datasource db {
        provider  = "postgresql"
        url       = env("POSTGRES_PRISMA_URL")
        directUrl = env("POSTGRES_URL_NON_POOLING")
}

// ==========================================
// USER MANAGEMENT
// ==========================================

model User {
        id             String   @id @default(cuid())
        email          String   @unique
        username       String?  @unique
        githubUsername String?  @unique
        displayName    String?
        avatarUrl      String?
        createdAt      DateTime @default(now())
        updatedAt      DateTime @updatedAt

        // Authentication
        password          String?
        emailVerified     DateTime?
        lastLoginAt       DateTime?
        isActive          Boolean   @default(true)
        githubAccessToken String?

        // User preferences
        preferences Json?

        // Relations
        projects            Project[]
        repositories        Repository[]
        scanJobs            ScanJob[]
        scanTargets         ScanTarget[]
        repoWebhookMappings RepoWebhookMapping[]

        @@map("users")
}

// ==========================================
// SCAN MANAGEMENT
// ==========================================

model ScanJob {
        id           String  @id @default(cuid())
        userId       String? // Optional for now to match current implementation
        projectId    String? // Optional link to project
        scanTargetId String? // Optional link to scan target

        // Core job information (exactly matching job.py)
        type   JobType   @default(SCAN_REPO)
        status JobStatus @default(PENDING)
        data   Json // Stores ScanJobData as JSON
        result Json? // Stores scan results
        error  String? // Error message if failed

        // Timing (matching job.py structure)
        createdAt DateTime @default(now()) @map("created_at")
        updatedAt DateTime @updatedAt @map("updated_at")

        // Execution details (optional)
        startedAt  DateTime?
        finishedAt DateTime?

        // Metrics (optional)
        vulnerabilitiesFound Int @default(0)

        // Relations
        user            User?               @relation(fields: [userId], references: [id], onDelete: SetNull)
        project         Project?            @relation(fields: [projectId], references: [id], onDelete: SetNull)
        scanTarget      ScanTarget?         @relation(fields: [scanTargetId], references: [id], onDelete: SetNull)
        vulnerabilities CodeVulnerability[]

        @@index([status, createdAt])
        @@index([userId, finishedAt])
        @@index([projectId])
        @@index([scanTargetId])
        @@map("scan_jobs")
}

// ==========================================
// VULNERABILITY MANAGEMENT
// ==========================================

model CodeVulnerability {
        id        String @id @default(cuid())
        scanJobId String

        // Core vulnerability information
        title       String
        description String
        severity    VulnerabilitySeverity
        category    VulnerabilityCategory

        // Location information
        filePath    String
        startLine   Int
        endLine     Int?
        codeSnippet String

        // Remediation
        recommendation String

        // Optional metadata (stored as JSON for flexibility)
        metadata Json? // Can store CWE, OWASP, confidence, etc.

        createdAt DateTime @default(now())

        // Relations
        scanJob ScanJob @relation(fields: [scanJobId], references: [id], onDelete: Cascade)

        @@index([scanJobId])
        @@index([scanJobId, severity])
        @@index([filePath])
        @@map("code_vulnerabilities")
}

// ==========================================
// PROJECT MANAGEMENT
// ==========================================

model Project {
        id     String @id @default(cuid())
        userId String // Owner

        // Core project information
        name        String // User-friendly project name
        description String?

        // Project configuration
        isActive Boolean @default(true)

        // Settings (stored as JSON for flexibility)
        settings Json? // Stores project-wide settings like notifications, policies, etc.

        // Metadata
        createdAt  DateTime  @default(now())
        updatedAt  DateTime  @updatedAt
        lastScanAt DateTime? // Last scan across all repositories in this project

        // Relations
        user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
        repositories        Repository[]
        scanJobs            ScanJob[]
        repoWebhookMappings RepoWebhookMapping[]

        @@unique([userId, name]) // Unique project names per user
        @@index([userId, isActive])
        @@index([lastScanAt])
        @@map("projects")
}

model Repository {
        id        String @id @default(cuid())
        projectId String // Parent project
        userId    String // Owner (for direct access)

        // Repository information
        fullName    String // Provider's full name (e.g., "owner/repo" for GitHub)
        description String?
        provider    RepositoryProvider @default(GITHUB)
        repoUrl     String // Git repository URL

        // Provider-specific identifiers
        externalId    String? // Provider's internal ID (e.g., GitHub repo ID)
        defaultBranch String  @default("main")

        // Provider-specific metadata (stored as JSON for flexibility)
        providerMetadata Json? // GitHub: stars, forks, language, etc.

        // Configuration
        isActive  Boolean @default(true)
        isPrivate Boolean @default(false) // Repository visibility

        // Integration settings
        webhookConfigured Boolean @default(false) // Whether webhooks are set up
        accessToken       String? // Provider-specific access token (encrypted)

        // Metadata
        createdAt  DateTime  @default(now())
        updatedAt  DateTime  @updatedAt
        lastScanAt DateTime? // Last scan across all targets in this repository
        lastSyncAt DateTime? // Last sync with provider

        // Relations
        project             Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)
        user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
        scanTargets         ScanTarget[]
        repoWebhookMappings RepoWebhookMapping[]

        @@unique([projectId, provider, fullName]) // Unique repo per project per provider
        @@unique([provider, externalId]) // Unique external ID per provider
        @@index([projectId, isActive])
        @@index([userId])
        @@index([provider])
        @@index([lastScanAt])
        @@map("repositories")
}

// ==========================================
// SCAN TARGET MANAGEMENT
// ==========================================

model ScanTarget {
        id           String  @id @default(cuid())
        userId       String // Owner
        repositoryId String? // Optional link to repository (nullable for backward compatibility)

        // Scan target information (specific branch/path within a repository)
        name        String // User-friendly name
        description String?
        repoUrl     String
        branch      String  @default("main")
        subPath     String? // Optional path filter

        // Configuration
        isActive Boolean @default(true)

        // Metadata
        createdAt  DateTime  @default(now())
        updatedAt  DateTime  @updatedAt
        lastScanAt DateTime?

        // Relations
        user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
        repository Repository? @relation(fields: [repositoryId], references: [id], onDelete: SetNull)
        scanJobs   ScanJob[]

        @@unique([userId, repoUrl, branch, subPath])
        @@index([userId, isActive])
        @@index([repositoryId])
        @@index([lastScanAt])
        @@map("scan_targets")
}

// ==========================================
// WEBHOOK MANAGEMENT
// ==========================================

model RepoWebhookMapping {
        id           String @id @default(cuid())
        userId       String // Owner of the webhook
        projectId    String // Project this webhook belongs to
        repositoryId String // Repository this webhook is configured for

        // GitHub webhook information
        webhookId String // GitHub webhook ID (returned from GitHub API)
        provider  RepositoryProvider @default(GITHUB)

        // Metadata
        createdAt       DateTime  @default(now())
        updatedAt       DateTime  @updatedAt
        lastTriggeredAt DateTime? // Last time this webhook was triggered

        // Relations
        user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
        project    Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
        repository Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

        // Constraints and indexes
        @@unique([provider, webhookId]) // Unique webhook ID per provider
        @@unique([repositoryId, provider]) // One webhook per repository per provider
        @@index([userId])
        @@index([projectId])
        @@index([repositoryId])
        @@index([webhookId])
        @@map("repo_webhook_mappings")
}

// ==========================================
// ENUMS
// ==========================================

// Job enums matching job.py
enum JobType {
        SCAN_REPO
        SCAN_FILE
        BATCH_SCAN
}

enum JobStatus {
        PENDING
        IN_PROGRESS
        COMPLETED
        FAILED
        CANCELLED
}

enum VulnerabilitySeverity {
        INFO
        LOW
        MEDIUM
        HIGH
        CRITICAL
}

enum VulnerabilityCategory {
        INJECTION
        AUTHENTICATION
        AUTHORIZATION
        CRYPTOGRAPHY
        DATA_EXPOSURE
        BUSINESS_LOGIC
        CONFIGURATION
        DEPENDENCY
        INPUT_VALIDATION
        OUTPUT_ENCODING
        SESSION_MANAGEMENT
        OTHER
}

enum RepositoryProvider {
        GITHUB
        BITBUCKET
        GITLAB
        AZURE_DEVOPS
        OTHER
}
