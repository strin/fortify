generator javascript {
        provider      = "prisma-client-js"
        output        = "../frontend/node_modules/.prisma/client"
        binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

generator python {
        provider             = "prisma-client-py"
        interface            = "asyncio"
        recursive_type_depth = 5
        output               = "../scan-agent/generated/prisma_client"
}

datasource db {
        provider  = "postgresql"
        url       = env("POSTGRES_PRISMA_URL")
        directUrl = env("POSTGRES_URL_NON_POOLING")
}

// ==========================================
// USER MANAGEMENT
// ==========================================

model User {
        id             String   @id @default(cuid())
        email          String   @unique
        username       String?  @unique
        githubUsername String?  @unique
        displayName    String?
        avatarUrl      String?
        createdAt      DateTime @default(now())
        updatedAt      DateTime @updatedAt

        // Authentication
        password          String?
        emailVerified     DateTime?
        lastLoginAt       DateTime?
        isActive          Boolean   @default(true)
        githubAccessToken String?

        // User preferences
        preferences Json?

        // Relations
        scanJobs ScanJob[]

        @@map("users")
}

// ==========================================
// SCAN MANAGEMENT
// ==========================================

model ScanJob {
        id     String  @id @default(cuid())
        userId String? // Optional for now to match current implementation

        // Core job information (matching job.py)
        type   JobType   @default(SCAN_REPO)
        status JobStatus @default(PENDING)
        data   Json // Stores ScanJobData as JSON
        result Json? // Stores scan results
        error  String? // Error message if failed

        // Repository information (extracted from data for indexing)
        repoUrl   String
        repoOwner String?
        repoName  String?
        branch    String  @default("main")
        commitSha String?

        // Execution details
        workerId       String?
        redisMessageId String?

        // Timing (matching job.py structure)
        createdAt  DateTime  @default(now())
        updatedAt  DateTime  @updatedAt
        startedAt  DateTime?
        finishedAt DateTime?

        // Additional fields for enhanced tracking
        llmModel  String? @default("claude-3-5-sonnet-20241022")
        llmConfig Json?

        // External integration
        webhookUrl String?
        requestId  String?

        // Metrics
        sourceBytes          BigInt?
        filesScanned         Int?
        vulnerabilitiesFound Int     @default(0)

        // Relations
        user            User?               @relation(fields: [userId], references: [id], onDelete: SetNull)
        vulnerabilities CodeVulnerability[]

        @@unique([repoUrl, commitSha, requestId])
        @@index([status, createdAt])
        @@index([userId, finishedAt])
        @@map("scan_jobs")
}

// ==========================================
// VULNERABILITY MANAGEMENT
// ==========================================

model CodeVulnerability {
        id        String @id @default(cuid())
        scanJobId String

        // Core vulnerability information
        title       String
        description String
        severity    VulnerabilitySeverity
        category    VulnerabilityCategory

        // Location information
        filePath    String
        startLine   Int
        endLine     Int?
        codeSnippet String

        // Remediation
        recommendation String

        // Optional metadata (stored as JSON for flexibility)
        metadata Json? // Can store CWE, OWASP, confidence, etc.

        createdAt DateTime @default(now())

        // Relations
        scanJob ScanJob @relation(fields: [scanJobId], references: [id], onDelete: Cascade)

        @@index([scanJobId])
        @@index([scanJobId, severity])
        @@index([filePath])
        @@map("code_vulnerabilities")
}

// ==========================================
// ENUMS
// ==========================================

// Job enums matching job.py
enum JobType {
        SCAN_REPO
        SCAN_FILE
        BATCH_SCAN
}

enum JobStatus {
        PENDING
        IN_PROGRESS
        COMPLETED
        FAILED
}

enum VulnerabilitySeverity {
        INFO
        LOW
        MEDIUM
        HIGH
        CRITICAL
}

enum VulnerabilityCategory {
        INJECTION
        AUTHENTICATION
        AUTHORIZATION
        CRYPTOGRAPHY
        DATA_EXPOSURE
        BUSINESS_LOGIC
        CONFIGURATION
        DEPENDENCY
        INPUT_VALIDATION
        OUTPUT_ENCODING
        SESSION_MANAGEMENT
        OTHER
}
